from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
from collections import deque

# Инициализируем список ссылок
# TODO: вот тут хелп

links = deque([
    'https://link1.com',
    'https://link2.com',
    'https://link3.com',
    # Добавьте сюда больше ссылок
])
user_links = {}  # Словарь для хранения ссылки для каждого пользователя

# TODO: мб это удалить так как функция задана выше?
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('Привет! Нажмите кнопку, чтобы получить ссылку на группу.', reply_markup=main_menu())

# TODO: Возможно то же самое, вырезать, или оставить и привязать к нашим параметрам
def main_menu() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton("Получить группу", callback_data='get_group')]]
    return InlineKeyboardMarkup(keyboard)


def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data == 'get_group':
        user_id = query.from_user.id

        if user_id not in user_links:
            if links:
                # Получаем ссылку для данного пользователя и удаляем её из очереди
                user_links[user_id] = links.popleft()
                query.edit_message_text(text=f'Ваша ссылка: {user_links[user_id]}')
            else:
                query.edit_message_text(text='Извините, больше ссылок нет.')


def run_bot(token: str):
    updater = Updater(token)

    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, start))
    updater.dispatcher.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    # Замените нашим токеном TOKEN
    # TODO: какой у нaс токен?

    run_bot('TOKEN')
